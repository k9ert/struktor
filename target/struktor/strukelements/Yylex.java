/* The following code was generated by JFlex 1.4.1 on 15.04.09 23:22 */

package struktor.strukelements;

import java.util.Stack;

import java_cup.runtime.Symbol;
import struktor.StruktorException;
import struktor.Tracer;

@SuppressWarnings("all")


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 15.04.09 23:22 from the specification file
 * <tt>/home/kim/src/struktor/parser/loader.lex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FOR = 10;
  public static final int PARAMLIST = 2;
  public static final int DOWHILE = 9;
  public static final int INPUT = 2;
  public static final int VALUE = 3;
  public static final int DECSTART = 5;
  public static final int CONDITION = 8;
  public static final int CONDITIONPARA = 7;
  public static final int YYINITIAL = 0;
  public static final int INSTRLIST = 2;
  public static final int VARTYP2 = 2;
  public static final int DEC = 4;
  public static final int STRUK = 1;
  public static final int BEGIN = 6;
  public static final int VARTYP1 = 2;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  3, 47,  6,  0, 53, 53,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    18,  0,  5,  0,  0,  0,  9, 37, 10, 33,  8,  7, 39,  7, 38, 12, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 50, 40,  0, 36,  0,  0, 
    13,  2,  2,  2, 42, 11,  2,  2,  2, 48,  2,  2,  2, 52,  2, 51, 
    43,  2,  2, 32,  2,  2,  2,  2,  2,  2,  2, 34,  4, 35,  0,  2, 
     0, 16, 28, 30, 26, 24, 44, 22, 31, 27,  2, 20, 29, 23, 25, 21, 
    49,  2, 17, 14, 15, 19,  2, 46,  2,  2,  2, 41,  0, 45,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\5\0\1\3\1\1\1\4\1\1"+
    "\5\5\1\6\5\5\1\7\1\5\1\10\3\5\1\11"+
    "\3\5\1\2\1\12\1\13\1\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\5\5\1\23\5\5\1\24"+
    "\1\25\4\5\1\26\1\27\1\30\1\27\1\31\1\5"+
    "\1\3\1\1\1\0\1\32\1\0\1\33\1\34\2\0"+
    "\1\35\1\0\1\36\7\0\1\37\2\0\1\40\2\0"+
    "\1\40\2\34\5\0\1\35\1\0\1\36\7\0\1\1"+
    "\3\34\11\0\1\37\2\0\1\40\3\0\2\34\1\0"+
    "\1\41\13\0\2\1\2\34\1\0\1\42\3\0\1\33"+
    "\3\0\2\34\1\0\1\43\5\0\1\44\4\0\2\1"+
    "\2\34\4\0\1\45\2\0\2\34\5\0\1\45\2\0"+
    "\1\46\2\1\1\34\1\47\1\50\1\0\1\51\3\0"+
    "\2\34\1\52\1\53\1\50\2\0\2\1\1\34\1\0"+
    "\1\32\1\54\2\0\2\34\1\0\2\1\1\34\1\55"+
    "\1\56\1\0\2\34\2\1\1\34\1\57\2\34\2\1"+
    "\3\34\2\1\3\34\2\1\3\34\2\1\3\34\2\1"+
    "\3\34\2\1\3\34\2\1\3\34\2\1\3\34\2\1"+
    "\2\34\1\60\1\1\2\61\1\34\1\1\1\34\1\62"+
    "\2\34\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u0288\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u0288\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u0288\0\u04da\0\u0288\0\u0510\0\u0546\0\u057c\0\u05b2"+
    "\0\u05e8\0\u061e\0\u0654\0\u068a\0\u06c0\0\u0288\0\u06f6\0\u0288"+
    "\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u0288\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u0288\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0288\0\u0288\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0288"+
    "\0\u0288\0\u0288\0\u0360\0\u0288\0\u0a20\0\u0288\0\u0a56\0\u02f4"+
    "\0\u02f4\0\u032a\0\u02f4\0\u0a8c\0\u0ac2\0\u0af8\0\u032a\0\u0b2e"+
    "\0\u032a\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u05e8\0\u0d14\0\u0288\0\u061e\0\u0d4a\0\u061e\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u02f4\0\u0efa"+
    "\0\u02f4\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074"+
    "\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u1368\0\u139e"+
    "\0\u05e8\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u0288"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u032a\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u0288\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u191a\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u032a\0\u1e2a"+
    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\u02f4\0\u2010\0\u2046\0\u0288\0\u207c\0\u20b2\0\u20e8\0\u211e"+
    "\0\u032a\0\u2154\0\u02f4\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262"+
    "\0\u0288\0\u0288\0\u02f4\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370"+
    "\0\u23a6\0\u218a\0\u218a\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u02f4\0\u258c\0\u25c2\0\u25f8\0\u262e"+
    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de"+
    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee"+
    "\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e"+
    "\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e"+
    "\0\u3084\0\u30ba\0\u10e0\0\u30f0\0\u0252\0\u10e0\0\u3126\0\u315c"+
    "\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u10e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\6\14\1\15\5\14\1\16\51\14\1\17\1\20\1\21"+
    "\2\17\1\20\1\15\1\17\3\20\1\21\1\22\1\17"+
    "\1\23\3\21\1\24\5\21\1\25\1\21\1\26\1\27"+
    "\1\30\1\21\1\31\2\21\7\17\1\32\1\17\2\21"+
    "\1\33\1\34\1\35\1\24\1\36\1\21\1\17\1\37"+
    "\1\21\1\24\6\17\1\15\5\17\1\22\5\17\1\24"+
    "\34\17\1\24\5\17\1\24\1\17\1\40\3\17\1\41"+
    "\1\15\5\17\1\22\5\17\1\24\22\17\1\42\1\43"+
    "\10\17\1\24\5\17\1\24\1\17\1\44\1\45\3\17"+
    "\1\15\1\17\1\46\2\17\1\45\1\47\1\17\4\45"+
    "\1\24\16\45\1\50\1\51\1\52\1\53\2\17\1\54"+
    "\1\55\1\56\3\45\1\17\1\45\1\24\2\45\1\17"+
    "\2\45\1\24\6\17\1\15\5\17\1\57\5\17\1\24"+
    "\7\17\1\60\1\61\2\17\1\62\1\17\1\63\1\64"+
    "\15\17\1\24\5\17\1\24\1\17\2\20\2\17\1\20"+
    "\1\15\1\17\4\20\1\22\1\17\1\65\3\20\1\24"+
    "\7\20\1\66\1\67\1\70\1\20\1\71\2\20\7\17"+
    "\1\72\1\73\2\20\1\74\1\17\1\75\1\24\1\76"+
    "\1\20\1\17\1\77\1\20\1\24\6\17\1\15\3\17"+
    "\1\100\1\17\1\22\5\17\1\24\34\17\1\24\5\17"+
    "\1\24\6\101\1\15\3\101\1\102\1\101\1\103\24\101"+
    "\1\104\24\101\6\17\1\15\5\17\1\22\5\17\1\24"+
    "\33\17\1\105\1\24\5\17\1\24\6\17\1\15\5\17"+
    "\1\22\5\17\1\24\34\17\1\106\5\17\1\24\6\14"+
    "\1\0\57\14\66\0\6\14\1\0\5\14\1\107\51\14"+
    "\6\110\1\0\41\110\1\111\16\110\2\112\3\110\1\0"+
    "\3\110\1\113\1\112\2\110\4\112\1\110\16\112\7\110"+
    "\1\111\1\110\3\112\1\110\1\112\1\110\2\112\1\110"+
    "\2\112\1\110\14\0\1\114\51\0\1\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\4\112\1\110\16\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\115\1\110\2\112"+
    "\1\110\2\112\2\110\2\112\3\110\1\0\3\110\1\113"+
    "\1\112\2\110\4\112\1\110\12\112\1\116\3\112\7\110"+
    "\1\111\1\110\3\112\1\110\1\112\1\110\2\112\1\110"+
    "\2\112\2\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\2\112\1\117\2\112\1\120\10\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\112\1\110\2\112"+
    "\1\110\2\112\2\110\2\112\3\110\1\0\3\110\1\113"+
    "\1\112\2\110\4\112\1\110\16\112\7\110\1\111\1\110"+
    "\2\112\1\121\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\2\110\2\112\3\110\1\0\3\110\1\113\1\112\2\110"+
    "\3\112\1\122\1\110\16\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\110\2\112\2\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\2\112\1\123"+
    "\1\112\1\110\16\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\4\112\1\110\2\112"+
    "\1\124\13\112\7\110\1\111\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\110\2\112\2\110\2\112\3\110\1\0"+
    "\3\110\1\113\1\112\2\110\4\112\1\110\14\112\1\125"+
    "\1\112\7\110\1\111\1\110\3\112\1\110\1\112\1\110"+
    "\2\112\1\110\2\112\2\110\2\112\3\110\1\0\3\110"+
    "\1\113\1\112\2\110\4\112\1\110\6\112\1\126\7\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\112\1\110\2\112"+
    "\1\110\2\112\2\110\2\112\3\110\1\0\3\110\1\113"+
    "\1\112\2\110\4\112\1\110\1\127\15\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\1\110\1\0\1\40\11\0\1\130\14\0\1\130\15\0"+
    "\1\131\17\0\4\132\1\133\1\134\1\0\57\132\4\135"+
    "\1\136\2\0\36\135\1\137\20\135\1\0\1\131\65\0"+
    "\1\44\65\0\2\45\10\0\1\45\2\0\4\45\1\0"+
    "\16\45\11\0\3\45\1\0\1\45\1\0\2\45\1\0"+
    "\2\45\15\0\1\140\65\0\1\141\76\0\1\142\71\0"+
    "\1\143\73\0\1\144\45\0\1\145\46\0\6\110\1\0"+
    "\41\110\1\111\5\110\1\146\15\110\1\0\16\110\1\147"+
    "\2\110\1\150\17\110\1\111\23\110\1\0\41\110\1\111"+
    "\3\110\1\151\17\110\1\0\12\110\1\152\26\110\1\111"+
    "\23\110\1\0\11\110\1\153\27\110\1\111\23\110\1\0"+
    "\16\110\1\154\22\110\1\111\23\110\1\0\30\110\1\155"+
    "\10\110\1\111\23\110\1\0\22\110\1\156\16\110\1\111"+
    "\23\110\1\0\14\110\1\157\24\110\1\111\15\110\37\0"+
    "\1\160\26\0\6\14\1\0\6\14\1\161\50\14\6\162"+
    "\1\0\6\162\1\163\46\162\1\164\1\162\1\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\4\112\1\110"+
    "\10\112\1\165\5\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\1\166\3\112\1\110"+
    "\16\112\7\110\1\111\1\110\3\112\1\110\1\112\1\110"+
    "\2\112\1\110\2\112\2\110\2\112\3\110\1\0\3\110"+
    "\1\113\1\112\2\110\4\112\1\110\16\112\7\110\1\111"+
    "\1\110\2\112\1\167\1\110\1\112\1\110\2\112\1\110"+
    "\2\112\2\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\5\112\1\170\10\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\2\110\2\112\3\110\1\0\3\110\1\113\1\112\2\110"+
    "\1\171\3\112\1\110\16\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\110\2\112\2\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\3\112\1\172"+
    "\1\110\16\112\7\110\1\111\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\110\2\112\2\110\2\112\3\110\1\0"+
    "\3\110\1\113\1\112\2\110\4\112\1\110\10\112\1\173"+
    "\5\112\7\110\1\111\1\110\3\112\1\110\1\112\1\110"+
    "\2\112\1\110\2\112\2\110\2\112\3\110\1\0\3\110"+
    "\1\113\1\112\2\110\4\112\1\110\16\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\1\112\1\174\1\110"+
    "\2\112\2\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\1\112\1\175\2\112\1\110\16\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\1\110\1\0\1\176\5\0\1\177\57\0\1\131\11\0"+
    "\1\130\14\0\1\130\35\0\3\132\1\200\1\133\1\201"+
    "\1\202\13\132\1\200\34\132\1\200\6\132\3\135\1\203"+
    "\1\136\1\135\1\204\13\135\1\203\22\135\1\137\11\135"+
    "\1\203\6\135\6\162\1\0\6\162\1\205\46\162\1\164"+
    "\7\162\1\0\6\162\1\206\46\162\1\164\1\162\23\0"+
    "\1\207\61\0\1\210\66\0\1\211\66\0\1\212\44\0"+
    "\6\110\1\0\24\110\1\213\14\110\1\111\23\110\1\0"+
    "\41\110\1\111\3\110\1\214\17\110\1\0\21\110\1\215"+
    "\17\110\1\111\23\110\1\0\7\110\1\216\31\110\1\111"+
    "\23\110\1\0\12\110\1\217\26\110\1\111\23\110\1\0"+
    "\24\110\1\220\14\110\1\111\23\110\1\0\41\110\1\111"+
    "\10\110\1\221\12\110\1\0\10\110\1\222\30\110\1\111"+
    "\15\110\33\0\1\223\32\0\6\14\1\0\7\14\1\224"+
    "\11\14\1\225\35\14\6\162\1\0\65\162\1\0\21\162"+
    "\1\226\43\162\1\0\7\162\1\227\47\162\1\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\1\112\1\230"+
    "\2\112\1\110\16\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\4\112\1\110\5\112"+
    "\1\231\10\112\7\110\1\111\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\110\2\112\2\110\2\112\3\110\1\0"+
    "\3\110\1\113\1\112\2\110\2\112\1\232\1\112\1\110"+
    "\16\112\7\110\1\111\1\110\3\112\1\110\1\112\1\110"+
    "\2\112\1\110\2\112\2\110\2\112\3\110\1\0\3\110"+
    "\1\113\1\112\2\110\2\112\1\233\1\112\1\110\16\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\112\1\110\2\112"+
    "\1\110\2\112\2\110\2\112\3\110\1\0\3\110\1\113"+
    "\1\112\2\110\4\112\1\110\5\112\1\234\10\112\7\110"+
    "\1\111\1\110\3\112\1\110\1\112\1\110\2\112\1\110"+
    "\2\112\2\110\2\112\3\110\1\0\3\110\1\235\1\112"+
    "\2\110\4\112\1\110\16\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\110\2\112\2\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\4\112\1\110"+
    "\12\112\1\236\3\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\4\112\1\110\1\237"+
    "\15\112\7\110\1\111\1\110\3\112\1\110\1\112\1\110"+
    "\2\112\1\110\2\112\2\110\2\112\3\110\1\0\3\110"+
    "\1\113\1\112\2\110\4\112\1\110\16\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\1\112\1\240\1\110"+
    "\2\112\1\110\1\0\1\176\64\0\3\132\1\200\1\133"+
    "\1\134\1\202\13\132\1\200\34\132\1\200\6\132\3\0"+
    "\1\202\1\132\1\0\1\202\13\0\1\202\34\0\1\202"+
    "\6\0\3\135\1\203\1\136\1\0\1\204\13\135\1\203"+
    "\22\135\1\137\11\135\1\203\6\135\3\0\1\204\1\135"+
    "\1\0\1\204\13\0\1\204\34\0\1\204\6\0\6\162"+
    "\1\0\1\162\1\241\17\162\1\226\43\162\1\0\1\162"+
    "\1\242\17\162\1\226\35\162\34\0\1\243\52\0\1\244"+
    "\77\0\1\245\32\0\6\110\1\0\10\110\1\246\30\110"+
    "\1\111\23\110\1\0\11\110\1\247\27\110\1\111\23\110"+
    "\1\0\11\110\1\250\27\110\1\111\23\110\1\0\21\110"+
    "\1\251\17\110\1\111\23\110\1\0\3\110\1\252\35\110"+
    "\1\111\23\110\1\0\26\110\1\253\12\110\1\111\23\110"+
    "\1\0\14\110\1\254\24\110\1\111\23\110\1\0\41\110"+
    "\1\111\10\110\1\255\4\110\35\0\1\256\30\0\6\14"+
    "\1\0\10\14\1\257\54\14\1\0\22\14\1\260\34\14"+
    "\6\162\1\0\22\162\1\261\42\162\1\0\17\162\1\262"+
    "\37\162\1\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\13\112\1\263\2\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\2\110\2\112\3\110\1\0\3\110\1\113\1\112\2\110"+
    "\4\112\1\110\1\264\15\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\110\2\112\2\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\4\112\1\110"+
    "\1\112\1\265\14\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\4\112\1\266\16\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\112\1\110\2\112"+
    "\1\110\2\112\1\110\6\252\1\0\57\252\1\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\4\112\1\110"+
    "\5\112\1\267\10\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\2\110\2\112\3\110"+
    "\1\0\3\110\1\113\1\112\2\110\1\112\1\270\2\112"+
    "\1\110\16\112\7\110\1\111\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\110\2\112\2\110\2\112\3\110\1\0"+
    "\3\110\1\113\1\112\2\110\4\112\1\110\1\271\15\112"+
    "\7\110\1\111\1\110\3\112\1\110\1\112\1\110\2\112"+
    "\1\110\2\112\1\110\6\162\1\0\1\162\1\272\63\162"+
    "\1\0\1\162\1\273\55\162\35\0\1\274\61\0\1\275"+
    "\34\0\6\110\1\0\27\110\1\276\11\110\1\111\23\110"+
    "\1\0\14\110\1\277\24\110\1\111\23\110\1\0\15\110"+
    "\1\300\23\110\1\111\23\110\1\0\13\110\1\266\25\110"+
    "\1\111\23\110\1\0\21\110\1\301\17\110\1\111\23\110"+
    "\1\0\10\110\1\302\30\110\1\111\23\110\1\0\14\110"+
    "\1\303\24\110\1\111\15\110\30\0\1\304\35\0\6\14"+
    "\1\0\11\14\1\305\53\14\1\0\23\14\1\306\33\14"+
    "\6\162\1\0\23\162\1\307\41\162\1\0\53\162\1\310"+
    "\3\162\1\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\14\112\1\311\1\112\7\110\1\111"+
    "\1\110\3\112\1\110\1\112\1\110\2\112\1\110\2\112"+
    "\2\110\2\112\3\110\1\0\3\110\1\113\1\112\2\110"+
    "\4\112\1\110\12\112\1\312\3\112\7\110\1\111\1\110"+
    "\3\112\1\110\1\112\1\110\2\112\1\110\2\112\2\110"+
    "\2\112\3\110\1\0\3\110\1\113\1\112\2\110\4\112"+
    "\1\110\16\112\7\110\1\313\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\110\2\112\2\110\2\314\2\110\1\314"+
    "\1\0\1\110\4\314\2\110\4\314\1\110\16\314\7\110"+
    "\1\111\1\110\3\314\1\110\1\314\1\110\2\314\1\110"+
    "\2\314\2\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\16\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\315\2\112\2\110\2\112"+
    "\3\110\1\0\3\110\1\113\1\112\2\110\1\112\1\316"+
    "\2\112\1\110\16\112\7\110\1\111\1\110\3\112\1\110"+
    "\1\112\1\110\2\112\1\110\2\112\1\110\6\162\1\0"+
    "\1\162\1\317\63\162\1\0\1\162\1\320\55\162\30\0"+
    "\1\321\63\0\1\322\37\0\6\110\1\0\30\110\1\323"+
    "\10\110\1\111\23\110\1\0\26\110\1\324\12\110\1\111"+
    "\23\110\1\0\41\110\1\313\23\110\1\0\41\110\1\111"+
    "\11\110\1\315\11\110\1\0\10\110\1\325\30\110\1\111"+
    "\15\110\6\14\1\0\12\14\1\326\52\14\1\0\13\14"+
    "\1\327\43\14\6\162\1\0\13\162\1\330\43\162\6\310"+
    "\1\0\57\310\1\110\2\112\3\110\1\0\3\110\1\113"+
    "\1\112\2\110\1\112\1\331\2\112\1\110\16\112\7\110"+
    "\1\111\1\110\3\112\1\110\1\112\1\110\2\112\1\110"+
    "\2\112\1\110\6\314\1\0\41\314\1\332\11\314\1\333"+
    "\3\314\6\110\1\0\13\110\1\334\25\110\1\111\16\110"+
    "\2\112\3\110\1\0\3\110\1\113\1\112\2\110\4\112"+
    "\1\110\16\112\7\110\1\111\1\110\3\112\1\110\1\112"+
    "\1\110\2\112\1\335\2\112\1\110\6\162\1\0\13\162"+
    "\1\336\51\162\1\0\13\162\1\337\43\162\6\110\1\0"+
    "\10\110\1\340\30\110\1\111\23\110\1\0\41\110\1\111"+
    "\11\110\1\335\3\110\6\14\1\0\10\14\1\341\54\14"+
    "\1\0\7\14\1\342\47\14\6\162\1\0\7\162\1\343"+
    "\47\162\1\110\2\112\3\110\1\0\3\110\1\113\1\112"+
    "\2\110\4\112\1\110\16\112\7\110\1\111\1\110\3\112"+
    "\1\110\1\112\1\110\2\112\1\344\2\112\2\110\2\345"+
    "\2\110\1\345\1\0\1\110\4\345\2\110\4\345\1\110"+
    "\16\345\7\110\1\111\1\110\3\345\1\110\1\345\1\110"+
    "\2\345\1\110\2\345\7\110\1\0\13\110\1\346\25\110"+
    "\1\111\15\110\6\162\1\0\43\162\1\347\1\350\20\162"+
    "\1\0\44\162\1\350\12\162\6\110\1\0\41\110\1\111"+
    "\11\110\1\344\3\110\6\14\1\0\13\14\1\351\51\14"+
    "\1\0\10\14\1\352\46\14\6\162\1\0\10\162\1\353"+
    "\46\162\6\345\1\0\57\345\1\110\2\354\2\110\1\354"+
    "\1\0\1\110\4\354\2\110\4\354\1\110\16\354\7\110"+
    "\1\111\1\110\3\354\1\110\1\354\1\110\2\354\1\110"+
    "\2\354\1\110\6\162\1\0\21\162\1\355\43\162\1\0"+
    "\12\162\1\356\44\162\6\14\1\0\7\14\1\357\55\14"+
    "\1\0\12\14\1\360\44\14\6\162\1\0\12\162\1\361"+
    "\44\162\6\354\1\0\57\354\6\162\1\0\27\162\1\362"+
    "\35\162\1\0\16\162\1\363\40\162\6\14\1\0\10\14"+
    "\1\364\54\14\1\0\14\14\1\365\42\14\6\162\1\0"+
    "\14\162\1\366\50\162\1\0\26\162\1\367\36\162\1\0"+
    "\17\162\1\370\37\162\6\14\1\0\12\14\1\371\52\14"+
    "\1\0\15\14\1\372\41\14\6\162\1\0\15\162\1\373"+
    "\47\162\1\0\11\162\1\374\53\162\1\0\12\162\1\375"+
    "\44\162\6\14\1\0\14\14\1\376\50\14\1\0\10\14"+
    "\1\377\46\14\6\162\1\0\10\162\1\u0100\54\162\1\0"+
    "\12\162\1\u0101\52\162\1\0\11\162\1\u0102\45\162\6\14"+
    "\1\0\15\14\1\u0103\47\14\1\0\16\14\1\u0104\40\14"+
    "\6\162\1\0\16\162\1\u0105\46\162\1\0\11\162\1\u0106"+
    "\53\162\1\0\20\162\1\u0107\36\162\6\14\1\0\10\14"+
    "\1\u0108\54\14\1\0\17\14\1\u0109\37\14\6\162\1\0"+
    "\17\162\1\u010a\45\162\1\0\10\162\1\u010b\54\162\1\0"+
    "\13\162\1\u010c\43\162\6\14\1\0\16\14\1\u010d\46\14"+
    "\1\0\12\14\1\u010e\44\14\6\162\1\0\12\162\1\u010f"+
    "\52\162\1\0\24\162\1\u0110\40\162\1\0\1\162\1\u0111"+
    "\55\162\6\14\1\0\17\14\1\u0112\45\14\1\0\11\14"+
    "\1\u0113\45\14\6\162\1\0\11\162\1\u0114\53\162\1\0"+
    "\16\162\1\u0115\46\162\1\0\1\162\1\u0116\55\162\6\14"+
    "\1\0\12\14\1\u0117\52\14\1\0\20\14\1\u0118\36\14"+
    "\6\162\1\0\20\162\1\u0119\44\162\1\0\22\162\1\u011a"+
    "\42\162\1\0\1\162\1\u011b\55\162\6\14\1\0\11\14"+
    "\1\u011c\53\14\1\0\20\14\1\u011d\36\14\6\162\1\0"+
    "\20\162\1\u011e\44\162\1\0\7\162\1\u011f\47\162\6\14"+
    "\1\0\20\14\1\u0120\36\14\6\162\1\0\13\162\1\u0121"+
    "\43\162\6\14\1\0\20\14\1\u0122\36\14\6\162\1\0"+
    "\1\162\1\u0123\55\162\6\u0122\1\0\57\u0122\6\162\1\0"+
    "\1\162\1\u0124\63\162\1\0\1\162\1\u0125\55\162";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12906];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\1\5\0\2\1\1\11\1\1\1\11"+
    "\4\1\1\11\5\1\1\11\1\1\1\11\11\1\1\11"+
    "\1\1\7\11\5\1\1\11\5\1\2\11\4\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\1\0\1\1\7\0\1\1\2\0"+
    "\1\11\2\0\3\1\5\0\1\1\1\0\1\1\7\0"+
    "\4\1\11\0\1\1\2\0\1\1\3\0\2\1\1\0"+
    "\1\11\13\0\4\1\1\0\1\1\3\0\1\1\3\0"+
    "\2\1\1\0\1\11\5\0\1\1\4\0\4\1\4\0"+
    "\1\1\2\0\2\1\5\0\1\1\2\0\1\11\5\1"+
    "\1\0\1\1\3\0\2\1\2\11\1\1\2\0\3\1"+
    "\1\0\2\1\2\0\2\1\1\0\5\1\1\0\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
// variables here
       Stack stack = new Stack();
       int lineCounter=1;
       int lastControl=0;
       String tempCond="";
       int paraCount=0;
       public static final int INTEGER=1;
       public static final int DOUBLE=2;
       public static final int CHARACTER=3;
       public static final int STRING=4;
       public static final int POINTER=5;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, StruktorException
 {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { Tracer.out(yytext());
                         yybegin(DECSTART);
          }
        case 52: break;
        case 36: 
          { Tracer.out(yytext());
                         tempCond=yytext().substring(4,yytext().length()-1);
                         yybegin(FOR);
                         return new Symbol(Lsym.FOR);
          }
        case 53: break;
        case 35: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.VARTYPE, new Integer(CHARACTER));
          }
        case 54: break;
        case 11: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.POINTER);
          }
        case 55: break;
        case 15: 
          { Tracer.out(yytext());
                         yybegin(VALUE); return new Symbol(Lsym.ASSIGN);
          }
        case 56: break;
        case 17: 
          { yybegin(DECSTART);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.SEMI);
          }
        case 57: break;
        case 39: 
          { Tracer.out(yytext());
                        return new Symbol(Lsym.ADMSG, new String(yytext().substring(6, yytext().length())));
          }
        case 58: break;
        case 12: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.RPAR);
          }
        case 59: break;
        case 50: 
          { yybegin(STRUK); return new Symbol(Lsym.STARTSTRUK);
          }
        case 60: break;
        case 6: 
          { /* ignore white space. */
          }
        case 61: break;
        case 5: 
          { throw new StruktorException("Illegal character: \""+yytext()+"\" in Line "+lineCounter);
          }
        case 62: break;
        case 48: 
          { Tracer.out(yytext());
                         yybegin(STRUK);
          }
        case 63: break;
        case 34: 
          { Tracer.out(yytext());
                         lastControl = Lsym.ELSE;
                         yybegin(BEGIN);
                         return new Symbol(Lsym.ELSE);
          }
        case 64: break;
        case 25: 
          { if (paraCount <= 0)
                         {
                            Tracer.out(tempCond+")");
                            paraCount = 0;
                            yybegin(BEGIN);
                            return new Symbol(Lsym.CONDITION, tempCond);
                         }
                         else
                         {
                            tempCond = tempCond + yytext();
                            paraCount--;
                         }
          }
        case 65: break;
        case 26: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.COMMAND,new String(yytext()));
          }
        case 66: break;
        case 32: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.STRING, new String(yytext().substring(1,yytext().length() - 1)));
          }
        case 67: break;
        case 21: 
          { Tracer.out(yytext());
                         stack.push(new Integer(lastControl));
                         yybegin(STRUK);
                         return new Symbol(Lsym.LSPAR);
          }
        case 68: break;
        case 10: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.VARNAME, new String(yytext()));
          }
        case 69: break;
        case 27: 
          { yybegin(DECSTART);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.STRUKNAME, new String(yytext().substring(0,yytext().length()-1)));
          }
        case 70: break;
        case 16: 
          { Tracer.out(yytext());
                         stack.push(new Integer(lastControl));
                         yybegin(DECSTART);
                         return new Symbol(Lsym.COMMA);
          }
        case 71: break;
        case 43: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.VARTYPE, new Integer(STRING));
          }
        case 72: break;
        case 19: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.RPAR);
          }
        case 73: break;
        case 22: 
          { tempCond = "";
                         Tracer.out(yytext());
                         yybegin(CONDITION);
          }
        case 74: break;
        case 24: 
          { tempCond = tempCond + yytext();
                         paraCount++;
          }
        case 75: break;
        case 41: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.BREAK,new Integer(1));
          }
        case 76: break;
        case 44: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.CASE,new String(yytext().substring(4,yytext().length()-1) ));
          }
        case 77: break;
        case 13: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.LEPAR);
          }
        case 78: break;
        case 23: 
          { tempCond = tempCond + yytext();
          }
        case 79: break;
        case 45: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.DEFAULT);
          }
        case 80: break;
        case 20: 
          { /* extra für Do-While(bla); */
                         Tracer.out(yytext());
                         yybegin(STRUK);
                         return new Symbol(Lsym.SEMI);
          }
        case 81: break;
        case 31: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.DOUBLE, new Double(yytext()));
          }
        case 82: break;
        case 18: 
          { Tracer.out(yytext());
                         stack.push(new Integer(lastControl));
                         return new Symbol(Lsym.LSPAR);
          }
        case 83: break;
        case 47: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.OUTPUT,new String(yytext().substring(7,yytext().length()) ));
          }
        case 84: break;
        case 14: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.REPAR);
          }
        case 85: break;
        case 9: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.INTEGER, new Integer(yytext()));
          }
        case 86: break;
        case 7: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.COMMAND,new String(""));
          }
        case 87: break;
        case 2: 
          { Tracer.out(yytext());
                         return new Symbol(Lsym.INTEGER, new Integer(yytext()));
          }
        case 88: break;
        case 1: 
          { /* ignore everything out of a struktogramm */
          }
        case 89: break;
        case 30: 
          { Tracer.out(yytext());
                         lastControl = Lsym.IF;
                         yybegin(CONDITIONPARA);
                         return new Symbol(Lsym.IF);
          }
        case 90: break;
        case 42: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.VARTYPE, new Integer(DOUBLE));
          }
        case 91: break;
        case 40: 
          { Tracer.out(yytext());
                         lastControl = Lsym.SWITCH;
                         yybegin(CONDITIONPARA);
                         return new Symbol(Lsym.SWITCH);
          }
        case 92: break;
        case 4: 
          { lineCounter++;
          }
        case 93: break;
        case 8: 
          { Tracer.out(yytext());
                         int i = ((Integer)stack.pop()).intValue();
                         // Spezialfall do{}while(); <----- ;!!!
                         if (i == Lsym.DO)
                            yybegin(DOWHILE);
                         else
                            yybegin(STRUK);
                         return new Symbol(Lsym.RSPAR);
          }
        case 94: break;
        case 3: 
          { // matcht immer !!
                         lastControl = Lsym.FOR;
                         yybegin(BEGIN);
                         return new Symbol(Lsym.CONDITION,tempCond);
          }
        case 95: break;
        case 46: 
          { yybegin(STRUK);
                         Tracer.out(yytext());
                         return new Symbol(Lsym.INPUT,new String(yytext().substring(7,yytext().length()) ));
          }
        case 96: break;
        case 38: 
          { Tracer.out(yytext());
                         yybegin(CONDITIONPARA);
                         return new Symbol(Lsym.WHILE);
          }
        case 97: break;
        case 37: 
          { Tracer.out(yytext());
                         lastControl = Lsym.WHILE;
                         yybegin(CONDITIONPARA);
                         return new Symbol(Lsym.WHILE);
          }
        case 98: break;
        case 49: 
          { yybegin(YYINITIAL); return new Symbol(Lsym.ENDSTRUK);
          }
        case 99: break;
        case 29: 
          { Tracer.out(yytext());
                         yybegin(BEGIN);
                         lastControl = Lsym.DO;
                         return new Symbol(Lsym.DO);
          }
        case 100: break;
        case 28: 
          { Tracer.out(yytext());
          }
        case 101: break;
        case 33: 
          { Tracer.out(yytext());
                         yybegin(DEC);
                         return new Symbol(Lsym.VARTYPE, new Integer(INTEGER));
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return (new Symbol(Lsym.EOF));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
