
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Feb 11 16:13:07 CET 2005
//----------------------------------------------------

package struktor.processor;

import java_cup.runtime.*;
import struktor.processor.operators.*;
import java.util.Vector;
import struktor.processor.datatypes.*;
import struktor.Tracer;

/** CUP v0.10k generated parser.
  * @version Fri Feb 11 16:13:07 CET 2005
  */
public class ProcParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ProcParser() {super();}

  /** Constructor which sets the default scanner. */
  public ProcParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\011\002\000\002\004\005\000\002\012\002" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\003\000\002\005\004\000\002\010" +
    "\003\000\002\010\004\000\002\007\004\000\002\007\003" +
    "\000\002\006\003\000\002\006\004\000\002\006\003\000" +
    "\002\006\004\000\002\006\003\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\050\005\006\007\026\011\004\015\016\022" +
    "\014\031\025\032\020\033\031\034\024\035\010\040\005" +
    "\041\023\042\007\043\015\044\017\045\022\047\013\050" +
    "\030\051\032\001\002\000\042\005\006\007\026\011\004" +
    "\015\016\022\014\031\025\032\020\033\031\034\024\035" +
    "\010\043\015\044\017\045\022\047\013\050\030\051\032" +
    "\001\002\000\044\004\uffd0\005\006\007\026\011\004\015" +
    "\016\022\014\031\025\032\020\033\031\034\024\035\010" +
    "\043\015\044\017\045\022\047\013\050\030\051\032\001" +
    "\002\000\004\046\123\001\002\000\006\004\uffd2\050\122" +
    "\001\002\000\042\005\006\007\026\011\004\015\016\022" +
    "\014\031\025\032\020\033\031\034\024\035\010\043\015" +
    "\044\017\045\022\047\013\050\030\051\032\001\002\000" +
    "\046\004\ufffe\006\045\007\034\011\050\012\040\013\043" +
    "\016\046\017\036\020\041\021\035\023\053\024\047\025" +
    "\037\026\044\027\042\030\054\031\052\032\051\001\002" +
    "\000\004\004\ufffc\001\002\000\102\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\037\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\001\002\000\042\005\006" +
    "\007\026\011\004\015\016\022\014\031\025\032\020\033" +
    "\031\034\024\035\010\043\015\044\017\045\022\047\013" +
    "\050\030\051\032\001\002\000\102\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\037\uffda\043\uffda\044\uffda\045" +
    "\uffda\047\uffda\050\uffda\051\uffda\001\002\000\042\005\006" +
    "\007\026\011\004\015\016\022\014\031\025\032\020\033" +
    "\031\034\024\035\010\043\015\044\017\045\022\047\013" +
    "\050\030\051\032\001\002\000\102\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\037\ufff8\043\ufff8\044\ufff8\045" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\001\002\000\042\005\006" +
    "\007\026\011\004\015\016\022\014\031\025\032\020\033" +
    "\031\034\024\035\010\043\015\044\017\045\022\047\013" +
    "\050\030\051\032\001\002\000\052\002\001\005\001\007" +
    "\001\011\001\015\001\022\001\031\001\032\001\033\001" +
    "\034\001\035\001\040\001\041\001\042\001\043\001\044" +
    "\001\045\001\047\001\050\001\051\001\001\002\000\044" +
    "\005\006\007\026\011\004\014\103\015\016\022\014\031" +
    "\025\032\020\033\031\034\024\035\010\043\015\044\017" +
    "\045\022\047\013\050\030\051\032\001\002\000\006\004" +
    "\uffd4\050\101\001\002\000\042\005\006\007\026\011\004" +
    "\015\016\022\014\031\025\032\020\033\031\034\024\035" +
    "\010\043\015\044\017\045\022\047\013\050\030\051\032" +
    "\001\002\000\042\005\006\007\026\011\004\015\016\022" +
    "\014\031\025\032\020\033\031\034\024\035\010\043\015" +
    "\044\017\045\022\047\013\050\030\051\032\001\002\000" +
    "\042\005\006\007\026\011\004\015\016\022\014\031\025" +
    "\032\020\033\031\034\024\035\010\043\015\044\017\045" +
    "\022\047\013\050\030\051\032\001\002\000\052\002\075" +
    "\005\006\007\026\011\004\015\016\022\014\031\025\032" +
    "\020\033\031\034\024\035\010\040\005\041\023\042\007" +
    "\043\015\044\017\045\022\047\013\050\030\051\032\001" +
    "\002\000\102\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\037\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\001\002\000\042\005\006\007\026\011\004\015" +
    "\016\022\014\031\025\032\020\033\031\034\024\035\010" +
    "\043\015\044\017\045\022\047\013\050\030\051\032\001" +
    "\002\000\102\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\037\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\001\002\000\102\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\036\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\030\uffec\031\052\032\051\033\uffec" +
    "\034\uffec\035\uffec\037\uffec\043\uffec\044\uffec\045\uffec\047" +
    "\uffec\050\uffec\051\uffec\001\002\000\042\005\006\007\026" +
    "\011\004\015\016\022\014\031\025\032\020\033\031\034" +
    "\024\035\010\043\015\044\017\045\022\047\013\050\030" +
    "\051\032\001\002\000\042\005\006\007\026\011\004\015" +
    "\016\022\014\031\025\032\020\033\031\034\024\035\010" +
    "\043\015\044\017\045\022\047\013\050\030\051\032\001" +
    "\002\000\004\043\071\001\002\000\042\005\006\007\026" +
    "\011\004\015\016\022\014\031\025\032\020\033\031\034" +
    "\024\035\010\043\015\044\017\045\022\047\013\050\030" +
    "\051\032\001\002\000\042\005\006\007\026\011\004\015" +
    "\016\022\014\031\025\032\020\033\031\034\024\035\010" +
    "\043\015\044\017\045\022\047\013\050\030\051\032\001" +
    "\002\000\042\005\006\007\026\011\004\015\016\022\014" +
    "\031\025\032\020\033\031\034\024\035\010\043\015\044" +
    "\017\045\022\047\013\050\030\051\032\001\002\000\042" +
    "\005\006\007\026\011\004\015\016\022\014\031\025\032" +
    "\020\033\031\034\024\035\010\043\015\044\017\045\022" +
    "\047\013\050\030\051\032\001\002\000\042\005\006\007" +
    "\026\011\004\015\016\022\014\031\025\032\020\033\031" +
    "\034\024\035\010\043\015\044\017\045\022\047\013\050" +
    "\030\051\032\001\002\000\042\005\006\007\026\011\004" +
    "\015\016\022\014\031\025\032\020\033\031\034\024\035" +
    "\010\043\015\044\017\045\022\047\013\050\030\051\032" +
    "\001\002\000\042\005\006\007\026\011\004\015\016\022" +
    "\014\031\025\032\020\033\031\034\024\035\010\043\015" +
    "\044\017\045\022\047\013\050\030\051\032\001\002\000" +
    "\042\005\006\007\026\011\004\015\016\022\014\031\025" +
    "\032\020\033\031\034\024\035\010\043\015\044\017\045" +
    "\022\047\013\050\030\051\032\001\002\000\042\005\006" +
    "\007\026\011\004\015\016\022\014\031\025\032\020\033" +
    "\031\034\024\035\010\043\015\044\017\045\022\047\013" +
    "\050\030\051\032\001\002\000\042\005\006\007\026\011" +
    "\004\015\016\022\014\031\025\032\020\033\031\034\024" +
    "\035\010\043\015\044\017\045\022\047\013\050\030\051" +
    "\032\001\002\000\102\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\035\ufff4\037\ufff4\043\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\001\002\000\102\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\037\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\001\002\000\042\005\006" +
    "\007\026\011\004\015\016\022\014\031\025\032\020\033" +
    "\031\034\024\035\010\043\015\044\017\045\022\047\013" +
    "\050\030\051\032\001\002\000\042\005\006\007\026\011" +
    "\004\015\016\022\014\031\025\032\020\033\031\034\024" +
    "\035\010\043\015\044\017\045\022\047\013\050\030\051" +
    "\032\001\002\000\102\004\uffe4\005\uffe4\006\045\007\034" +
    "\011\050\012\040\013\043\014\uffe4\015\uffe4\016\uffe4\017" +
    "\036\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\052\032\051\033\uffe4\034" +
    "\uffe4\035\uffe4\037\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\001\002\000\102\004\uffe6\005\uffe6\006" +
    "\045\007\034\011\050\012\040\013\043\014\uffe6\015\uffe6" +
    "\016\uffe6\017\036\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\052\032\051" +
    "\033\uffe6\034\uffe6\035\uffe6\037\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\001\002\000\102\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\036\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\052\032\051\033\ufff0\034\ufff0\035\ufff0\037\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\001\002\000" +
    "\102\004\uffe7\005\uffe7\006\045\007\034\011\050\012\040" +
    "\013\043\014\uffe7\015\uffe7\016\uffe7\017\036\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\052\032\051\033\uffe7\034\uffe7\035\uffe7\037" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\001\002\000\102\004\uffdf\005\uffdf\006\045\007\034\011" +
    "\050\012\040\013\043\014\uffdf\015\uffdf\016\uffdf\017\036" +
    "\020\041\021\035\022\uffdf\023\053\024\047\025\037\026" +
    "\044\027\042\030\054\031\052\032\051\033\uffdf\034\uffdf" +
    "\035\uffdf\037\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\001\002\000\102\004\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\011\050\012\040\013\043\014\ufff6\015\ufff6\016" +
    "\ufff6\017\036\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\052\032\051\033" +
    "\ufff6\034\ufff6\035\ufff6\037\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\047\ufff6\050\ufff6\051\ufff6\001\002\000\102\004\uffe8\005" +
    "\uffe8\006\045\007\034\011\050\012\040\013\043\014\uffe8" +
    "\015\uffe8\016\uffe8\017\036\020\uffe8\021\uffe8\022\uffe8\023" +
    "\053\024\047\025\uffe8\026\uffe8\027\042\030\054\031\052" +
    "\032\051\033\uffe8\034\uffe8\035\uffe8\037\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\001\002\000\102" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\036\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\052\032\051\033\uffee\034\uffee\035\uffee\037\uffee" +
    "\043\uffee\044\uffee\045\uffee\047\uffee\050\uffee\051\uffee\001" +
    "\002\000\102\004\uffe5\005\uffe5\006\045\007\034\011\050" +
    "\012\040\013\043\014\uffe5\015\uffe5\016\uffe5\017\036\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\052\032\051\033\uffe5\034\uffe5\035" +
    "\uffe5\037\uffe5\043\uffe5\044\uffe5\045\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\001\002\000\102\004\uffe2\005\uffe2\006\045\007" +
    "\034\011\050\012\040\013\043\014\uffe2\015\uffe2\016\uffe2" +
    "\017\036\020\uffe2\021\035\022\uffe2\023\053\024\047\025" +
    "\037\026\044\027\042\030\054\031\052\032\051\033\uffe2" +
    "\034\uffe2\035\uffe2\037\uffe2\043\uffe2\044\uffe2\045\uffe2\047" +
    "\uffe2\050\uffe2\051\uffe2\001\002\000\102\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\036\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\052\032" +
    "\051\033\uffef\034\uffef\035\uffef\037\uffef\043\uffef\044\uffef" +
    "\045\uffef\047\uffef\050\uffef\051\uffef\001\002\000\102\004" +
    "\uffea\005\uffea\006\045\007\034\011\050\012\040\013\043" +
    "\014\uffea\015\uffea\016\uffea\017\036\020\uffea\021\uffea\022" +
    "\uffea\023\053\024\047\025\uffea\026\uffea\027\042\030\054" +
    "\031\052\032\051\033\uffea\034\uffea\035\uffea\037\uffea\043" +
    "\uffea\044\uffea\045\uffea\047\uffea\050\uffea\051\uffea\001\002" +
    "\000\102\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\037\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051" +
    "\uffdb\001\002\000\102\004\uffe3\005\uffe3\006\045\007\034" +
    "\011\050\012\040\013\043\014\uffe3\015\uffe3\016\uffe3\017" +
    "\036\020\uffe3\021\uffe3\022\uffe3\023\053\024\047\025\037" +
    "\026\044\027\042\030\054\031\052\032\051\033\uffe3\034" +
    "\uffe3\035\uffe3\037\uffe3\043\uffe3\044\uffe3\045\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\001\002\000\102\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\011\050\012\040\013\043\014\ufff3\015\ufff3" +
    "\016\ufff3\017\036\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\052\032\051" +
    "\033\ufff3\034\ufff3\035\ufff3\037\ufff3\043\ufff3\044\ufff3\045" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\001\002\000\052\002\uffff" +
    "\005\uffff\007\uffff\011\uffff\015\uffff\022\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\040\uffff\041\uffff\042\uffff" +
    "\043\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\001" +
    "\002\000\004\002\000\001\002\000\102\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\036\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\052\032" +
    "\051\033\uffed\034\uffed\035\uffed\037\uffed\043\uffed\044\uffed" +
    "\045\uffed\047\uffed\050\uffed\051\uffed\001\002\000\102\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\036\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\001\002" +
    "\000\102\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\036\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\052\032\051\033\uffeb\034\uffeb\035\uffeb" +
    "\037\uffeb\043\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051" +
    "\uffeb\001\002\000\004\004\uffd3\001\002\000\100\005\uffd5" +
    "\006\045\007\034\011\050\012\040\013\043\014\uffd5\015" +
    "\uffd5\016\046\017\036\020\041\021\035\022\uffd5\023\053" +
    "\024\047\025\037\026\044\027\042\030\054\031\052\032" +
    "\051\033\uffd5\034\uffd5\035\uffd5\037\110\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\051\uffd5\001\002\000\102\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\001\002" +
    "\000\044\005\uffd8\007\uffd8\011\uffd8\014\uffd8\015\uffd8\022" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002\000" +
    "\044\005\006\007\026\011\004\014\106\015\016\022\014" +
    "\031\025\032\020\033\031\034\024\035\010\043\015\044" +
    "\017\045\022\047\013\050\030\051\032\001\002\000\102" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\037\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\001" +
    "\002\000\044\005\uffd7\007\uffd7\011\uffd7\014\uffd7\015\uffd7" +
    "\022\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002" +
    "\000\044\005\uffd6\007\uffd6\011\uffd6\014\uffd6\015\uffd6\022" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\043\uffd6" +
    "\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000" +
    "\102\004\ufff5\005\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\036\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\001\002\000\046\006\045\007\034\011\050\012\040\013" +
    "\043\014\113\016\046\017\036\020\041\021\035\023\053" +
    "\024\047\025\037\026\044\027\042\030\054\031\052\032" +
    "\051\001\002\000\102\004\uffe0\005\uffe0\006\uffe0\007\uffe0" +
    "\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\037\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\001\002\000\102\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\036\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\052\032\051" +
    "\033\uffe1\034\uffe1\035\uffe1\037\uffe1\043\uffe1\044\uffe1\045" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\001\002\000\004\004\116" +
    "\001\002\000\052\002\ufffb\005\ufffb\007\ufffb\011\ufffb\015" +
    "\ufffb\022\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\001\002\000\004\004\120\001\002" +
    "\000\052\002\ufffd\005\ufffd\007\ufffd\011\ufffd\015\ufffd\022" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\047\ufffd\050" +
    "\ufffd\051\ufffd\001\002\000\102\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\036\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\052\032\051\033" +
    "\uffde\034\uffde\035\uffde\037\uffde\043\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\051\uffde\001\002\000\004\004\uffd1\001" +
    "\002\000\004\014\124\001\002\000\102\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\047\uffe9\050\uffe9\051\uffe9\001\002\000\046\004" +
    "\uffcf\006\045\007\034\011\050\012\040\013\043\016\046" +
    "\017\036\020\041\021\035\023\053\024\047\025\037\026" +
    "\044\027\042\030\054\031\052\032\051\001\002\000\102" +
    "\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\036\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\052\032\051\033\uffd9\034\uffd9\035\uffd9\037\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\012\003\026\004\020\005\010\006\011\001" +
    "\001\000\004\005\125\001\001\000\004\005\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\120\001" +
    "\001\000\004\011\116\001\001\000\004\012\114\001\001" +
    "\000\002\001\001\000\004\005\113\001\001\000\002\001" +
    "\001\000\004\005\111\001\001\000\002\001\001\000\004" +
    "\005\110\001\001\000\002\001\001\000\010\005\101\007" +
    "\103\010\104\001\001\000\002\001\001\000\004\005\077" +
    "\001\001\000\004\005\076\001\001\000\004\005\075\001" +
    "\001\000\010\004\073\005\010\006\011\001\001\000\002" +
    "\001\001\000\004\005\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\072\001\001\000\004\005\071" +
    "\001\001\000\002\001\001\000\004\005\067\001\001\000" +
    "\004\005\066\001\001\000\004\005\065\001\001\000\004" +
    "\005\064\001\001\000\004\005\063\001\001\000\004\005" +
    "\062\001\001\000\004\005\061\001\001\000\004\005\060" +
    "\001\001\000\004\005\057\001\001\000\004\005\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\055" +
    "\001\001\000\004\005\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\101\007\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ProcParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ProcParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ProcParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void report_error(String message, String info)
	{
	
	}

	public void debug_message(String message)
	{
		struktor.Tracer.out(message);
	}

	public void report_fatal_error(
    String   message,
    Object   info)
    throws java.lang.Exception
    {
      done_parsing();
      report_error(message, info);
      if (message.equals("Can't recover from previous error(s)"))
	    throw new ProcessorException("Undefined Parsing Error: "+info);
	  else
	  	throw new ProcessorException("Syntax Error !");
    }		 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ProcParser$actions {

 

Memory mem = Memory.getActualForm(); 
Processor proc = Processor.getActualProcessor();
Vector paramList = new Vector();
			
  private final ProcParser parser;

  /** Constructor */
  CUP$ProcParser$actions(ProcParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ProcParser$do_action(
    int                        CUP$ProcParser$act_num,
    java_cup.runtime.lr_parser CUP$ProcParser$parser,
    java.util.Stack            CUP$ProcParser$stack,
    int                        CUP$ProcParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ProcParser$result;

      /* select the action based on the action number */
      switch (CUP$ProcParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // command ::= RET expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			if (true)
			throw new ReturnException(e.eval());
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // command ::= RET 
            {
              Object RESULT = null;
		
			if (true)
			throw new ReturnException();
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // command ::= CONTINUE INTEGER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			if (true)
			throw new ContinueException(i);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // command ::= CONTINUE 
            {
              Object RESULT = null;
		
			if (true)
			throw new ContinueException();
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // command ::= BREAK INTEGER 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			if (true)
			throw new BreakException(i);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // command ::= BREAK 
            {
              Object RESULT = null;
		
			if (true)
			throw new BreakException();
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(4/*command*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			paramList.addElement(e.eval());
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(5/*parameter*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter ::= expr PARAM 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		
			paramList.addElement(e.eval());
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(5/*parameter*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramlist ::= paramlist parameter 
            {
              Vector RESULT = null;

              CUP$ProcParser$result = new java_cup.runtime.Symbol(6/*paramlist*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramlist ::= parameter 
            {
              Vector RESULT = null;

              CUP$ProcParser$result = new java_cup.runtime.Symbol(6/*paramlist*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= TIMES expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			Tracer.out("## reducing deref to lvalue");
			RESULT = new Deref(e, mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= VARIABLE 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out("## reducing variable ("+v+") to lvalue");
			RESULT = new LValue(v, mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr PART VARIABLE 
            {
              Expr RESULT = null;
		int lvalueleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int lvalueright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr lvalue = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out("## reducing lvalue and identifier to Part");
			try {
				RESULT = new Part(lvalue,identifier, mem);
			} catch(ProcessorException pe) {}
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= FUNC RPAREN 
            {
              Expr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		
			RESULT = new struktor.processor.functions.Function(proc.struktor, f, new Vector(), proc.getGOutput(), proc.getTOutput(), mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= FUNC paramlist RPAREN 
            {
              Expr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		
			Vector temp = paramList;
			paramList = new Vector();
			RESULT = new struktor.processor.functions.Function(proc.struktor, f, temp, proc.getGOutput(), proc.getTOutput(),mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= ADRESS expr 
            {
              Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out("## reducing ADRESS lvalue to expr");
			RESULT = new AdressOfVariable(l, mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr ASSIGN expr 
            {
              Expr RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			Tracer.out("## reducing Assign to expr");
			proc.valueChanged();
			RESULT = new Assign(v,e, mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		 
			RESULT = e;
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NOT expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new LogNot(e);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr LOGOR expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new LogOr(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr LOGAND expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new LogAnd(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr LEQ expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new LessOrEqual(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MEQ expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new MoreOrEqual(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr LES expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new Less(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MOR expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new More(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr NEQ expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new NotEqual(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= SIZEOF TYPENAME RPAREN 
            {
              Expr RESULT = null;
		int soleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		
			RESULT = new Sizeof(type,mem); 
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr EQU expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new Equal(e1,e2); 
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= DOUBLECAST expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out("## reducing DoubleCast e");
			RESULT = new IntToDouble(e);  
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= INTCAST expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out("## reducing IntCast e");
			RESULT = new DoubleToInt(e); 
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= MINUS expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			RESULT = new UnaryMinus(e); 
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr MOD expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			RESULT = new Modulo(e1,e2); 
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new Divide(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr TIMES expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new Mult(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DEC 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
			
			RESULT = new PostDec(e,mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= DEC expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new PreDec(e,mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr MINUS expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new BinaryMinus(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr INC 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
			
			RESULT = new PostInc(e,mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= INC expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new PreInc(e,mem);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr PLUS expr 
            {
              Expr RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
			
			RESULT = new BinaryPlus(e1,e2);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= CHARACTER 
            {
              Expr RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out(" Character = " + c);
			RESULT = new Const(c);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= STRING 
            {
              Expr RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
			Tracer.out(" String = " + s);
			// demaskieren von maskierten Escape-Sequenzen
			for(int i=0; i<s.length();i++)
			{
				if (s.charAt(i) == '\\')
				if(s.charAt(i+1) == '\"' || s.charAt(i+1) == '\\')
				s= s.substring(0,i)+s.substring(i+1,s.length());
			}	
			RESULT = new Const(s);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= INTEGER 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new Const(i);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= DOUBLE 
            {
              Expr RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		
			RESULT = new Const(n);
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= command NT$1 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;

              CUP$ProcParser$result = new java_cup.runtime.Symbol(2/*expr_part*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;

		   	RESULT = o;
		
              CUP$ProcParser$result = new java_cup.runtime.Symbol(8/*NT$1*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= expr NT$0 SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).value;

              CUP$ProcParser$result = new java_cup.runtime.Symbol(2/*expr_part*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;

			Object result=e;
			Tracer.out("expr_part:(vor eval) = " + e);
			while(result instanceof Expr)
				result = ((Expr)result).eval();
			RESULT = result;
               
              CUP$ProcParser$result = new java_cup.runtime.Symbol(7/*NT$0*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list expr_part 
            {
              Object RESULT = null;

              CUP$ProcParser$result = new java_cup.runtime.Symbol(1/*expr_list*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).value;
		RESULT = start_val;
              CUP$ProcParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ProcParser$parser.done_parsing();
          return CUP$ProcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_part 
            {
              Object RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).value;
		 
	   		Tracer.out("expr_list: = " + o);
	  		RESULT = o; 
	   	
              CUP$ProcParser$result = new java_cup.runtime.Symbol(1/*expr_list*/, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ProcParser$stack.elementAt(CUP$ProcParser$top-0)).right, RESULT);
            }
          return CUP$ProcParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

